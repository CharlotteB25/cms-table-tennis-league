<!DOCTYPE html>
<html lang="nl">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Profiel Bewerken</title>
    <link
      rel="icon"
      type="image/x-icon"
      href="{{ siteUrl('uploads/favicon/favicon.ico') }}"
    />

    <style>
      :root {
        --cream: #fdfaf6;
        --soft-red: #d9534f;
        --soft-red-dark: #b52e2a;
        --text: #333;
        --muted: #6b6b6b;
        --card: #ffffff;
        --ring: #e9e9e9;
        --ring-strong: #d8d8d8;
        --shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
        --tint: #fff7f5;

        --bg-gradient-start: #fffaf6;
        --bg-gradient-end: #f4e7e3;
        --purple-700: #5e548e; /* default secondary */
        --purple-900: #231942; /* deeper option */
        --purple-50: #f3effa;
        --purple-100: #ebe6f5;
      }
      * {
        box-sizing: border-box;
      }

      body {
        margin: 0;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        font-family: Arial, sans-serif;
        color: var(--text);
        background: radial-gradient(
            1200px 700px at 110% -10%,
            color-mix(in oklab, var(--purple-700) 14%, transparent),
            transparent 60%
          ),
          linear-gradient(
            160deg,
            var(--bg-gradient-start),
            var(--bg-gradient-end)
          );
        position: relative;
        overflow-x: hidden;
      }

      /* Subtle animated band Ã  la reference (soft, purple-tinted) */
      body::before {
        content: "";
        position: fixed;
        inset: -10% -5% auto -5%;
        height: 140%;
        z-index: 0;
        background: url("data:image/svg+xml,%3Csvg width='800' height='600' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0 100 Q400 200 800 100 T1600 100 V600 H0 Z' fill='%235e548e' opacity='0.06'/%3E%3C/svg%3E");
        background-repeat: repeat-x;
        background-size: cover;
        animation: floatBg 24s linear infinite;
        pointer-events: none;
      }

      /* More space around page content */
      main {
        margin-left: 200px; /* fixed nav space */
        padding: 3rem 2.5rem;
        flex: 1;
        display: flex;
        justify-content: center;
        align-items: flex-start;
      }

      /* Back link spacing */
      .header-section {
        margin-left: 200px;
        padding: 14px 24px 0;
      }
      .terug-button {
        appearance: none;
        border: 2px solid var(--soft-red);
        background: #fff;
        color: var(--soft-red);
        padding: 10px 16px;
        border-radius: 10px;
        font-weight: 700;
        text-decoration: none;
        display: inline-block;
        transition: background 0.15s ease, color 0.15s ease,
          border-color 0.15s ease, transform 0.1s ease;
      }
      .terug-button:hover {
        background: var(--soft-red);
        color: var(--cream);
        transform: translateY(-1px);
      }

      /* Wider, more colorful panel */
      .profile-form {
        position: relative;
        max-width: 900px;
        width: 100%;
        background: linear-gradient(180deg, #fff 0%, var(--tint) 100%);
        border: 1px solid var(--ring);
        border-radius: 14px;
        box-shadow: var(--shadow);
        padding: 22px 22px 15px;
        overflow: hidden;
      }
      /* Decorative top bar */
      .profile-form::before {
        content: "";
        position: absolute;
        inset: 0 0 auto 0;
        height: 8px;
        background: linear-gradient(90deg, var(--soft-red), #f07a76);
      }

      .profile-form h1 {
        font-size: 28px;
        margin: 0 0 10px;
        text-align: center;
        color: var(--soft-red-dark);
      }
      .help {
        color: var(--muted);
        text-align: center;
        margin: 0 0 18px;
      }

      /* Spacing tweaks */
      .row {
        margin-bottom: 10px;
      }
      .row:last-of-type {
        margin-bottom: 14px;
      }

      label {
        display: block;
        font-weight: 800;
        margin-bottom: 7px;
        letter-spacing: 0.2px;
        color: #4a4a4a;
      }

      input[type="text"],
      input[type="email"],
      input[type="password"] {
        width: 100%;
        padding: 12px 14px; /* bigger touch target */
        border: 1px solid var(--ring-strong);
        border-radius: 12px;
        background: #fff;
        box-shadow: inset 0 1px 0 rgba(0, 0, 0, 0.02);
        transition: border-color 0.15s ease, box-shadow 0.15s ease,
          transform 0.04s ease;
      }
      input[type="text"]:focus,
      input[type="email"]:focus,
      input[type="password"]:focus {
        outline: none;
        border-color: var(--soft-red);
        box-shadow: 0 0 0 4px rgba(217, 83, 79, 0.14),
          inset 0 1px 0 rgba(0, 0, 0, 0.02);
      }

      .radio-row {
        display: flex;
        gap: 18px;
        align-items: center;
        flex-wrap: wrap;
      }

      .muted {
        color: var(--muted);
        font-size: 0.92rem;
      }
      .small {
        font-size: 0.85rem;
      }

      /* Buttons: chunkier + colorful */
      .btn {
        appearance: none;
        border: 2px solid var(--soft-red);
        background: var(--soft-red);
        color: var(--cream);
        border-radius: 12px;
        padding: 12px 16px;
        font-weight: 800;
        cursor: pointer;
        transition: background 0.15s ease, border-color 0.15s ease,
          transform 0.1s ease, filter 0.15s ease;
      }
      .btn:hover {
        background: var(--soft-red-dark);
        border-color: var(--soft-red-dark);
        transform: translateY(-1px);
      }
      .btn:active {
        transform: translateY(0);
        filter: brightness(0.98);
      }
      .btn-outline {
        background: #fff;
        color: var(--soft-red);
        border-color: var(--soft-red);
      }
      .btn-danger {
        background: #b91c1c;
        border-color: #b91c1c;
      }

      .actions {
        display: grid;
        gap: 12px;
        margin-top: 16px;
      }

      /* Photo block: larger avatar + ring */
      .photo-wrap {
        display: flex;
        gap: 18px;
        align-items: center;
        margin-bottom: 10px;
        flex-wrap: wrap;
      }
      .avatar {
        width: 110px;
        height: 110px;
        border-radius: 50%;
        object-fit: cover;
        border: 3px solid #fde3e2; /* soft red ring */
        background: #f5f5f5;
        box-shadow: 0 6px 18px rgba(0, 0, 0, 0.08);
        transition: transform 0.1s ease;
      }
      .avatar:hover {
        transform: scale(1.01);
      }
      .photo-controls {
        display: grid;
        gap: 10px;
      }
      .inline-actions {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
      }
      .file-input {
        display: block;
      }

      /* Feedback banners with spacing */
      /* ---------- Popup (success/error) ---------- */
      .popup {
        position: fixed;
        inset: 0;
        display: none;
        place-items: center;
        background: rgba(0, 0, 0, 0.28);
        z-index: 1000;
      }
      .popup.show {
        display: grid;
      }

      .popup-card {
        width: min(560px, 92vw);
        border-radius: 14px;
        border: 1px solid var(--ring);
        background: #fff;
        box-shadow: 0 18px 60px rgba(0, 0, 0, 0.18);
        padding: 18px 18px 14px;
        animation: popupIn 0.18s ease-out both;
      }
      @keyframes popupIn {
        from {
          transform: translateY(6px) scale(0.98);
          opacity: 0;
        }
        to {
          transform: translateY(0) scale(1);
          opacity: 1;
        }
      }
      .popup-head {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 8px;
      }
      .popup-title {
        font-size: 1.1rem;
        font-weight: 800;
        margin: 0;
        color: #1f2937;
      }
      .popup-body {
        color: #334155;
        line-height: 1.4;
      }
      .popup-actions {
        display: flex;
        justify-content: flex-end;
        gap: 8px;
        margin-top: 14px;
      }
      .popup .icon {
        width: 22px;
        height: 22px;
        flex: 0 0 22px;
        border-radius: 50%;
        display: grid;
        place-items: center;
        color: #fff;
      }
      /* success */
      .popup-card.success .icon {
        background: #10b981;
      }
      .popup-card.success {
        border-color: #a7f3d0;
        background: #f0fdf4;
      }
      /* error */
      .popup-card.error .icon {
        background: #ef4444;
      }
      .popup-card.error {
        border-color: #fecaca;
        background: #fff1f2;
      }

      /* Close button (secondary look) */
      .btn-ghost {
        appearance: none;
        border: 1px solid var(--ring-strong);
        background: #fff;
        color: #374151;
        border-radius: 10px;
        padding: 8px 12px;
        font-weight: 700;
        cursor: pointer;
      }
      .btn-ghost:hover {
        background: #f8fafc;
      }

      /* ---------- Switch (capsule) replacing radios ---------- */
      .switch {
        display: inline-flex;
        align-items: center;
        gap: 12px;
        user-select: none;
        cursor: pointer;
      }
      .switch-input {
        position: absolute;
        opacity: 0;
        width: 1px;
        height: 1px;
        overflow: hidden;
      }
      .switch-track {
        width: 56px;
        height: 30px;
        border-radius: 999px;
        background: #e5e7eb;
        border: 1px solid var(--ring-strong);
        position: relative;
        transition: background 0.18s ease, border-color 0.18s ease;
        box-shadow: inset 0 1px 0 rgba(0, 0, 0, 0.03);
        cursor: pointer;
      }
      .switch-handle {
        position: absolute;
        top: 50%;
        left: 3px;
        width: 24px;
        height: 24px;
        background: #fff;
        border-radius: 999px;
        border: 1px solid #e5e7eb;
        transform: translate(0, -50%);
        transition: transform 0.18s ease;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.12);
      }
      .switch-input:checked + .switch-track {
        background: color-mix(in oklab, var(--soft-red) 86%, white);
        border-color: var(--soft-red);
      }
      .switch-input:checked + .switch-track .switch-handle {
        transform: translate(26px, -50%);
        border-color: #fce7e7;
      }
      .switch-input:focus-visible + .switch-track {
        outline: 3px solid rgba(217, 83, 79, 0.25);
        outline-offset: 2px;
      }
      .switch-label {
        font-weight: 800;
        letter-spacing: 0.2px;
        color: #4a4a4a;
        cursor: pointer;
      }
      .switch-label.on {
        color: var(--soft-red-dark);
      }

      /* Responsive */
      @media (max-width: 760px) {
        main {
          padding: 1.5rem;
          margin-left: 0;
        }
        .header-section {
          margin-left: 0;
          padding: 12px 16px 0;
        }
        .profile-form {
          padding: 24px 18px 20px;
        }
      }
    </style>
  </head>
  <body>
    {% include 'global/nav.twig' %}

    <main>
      {# Current notify + photo URL #} {% set notify =
      (currentUser.emailNotifications ??
      currentUser.getFieldValue('emailNotifications')) ? true : false %} {% set
      photoUrl = currentUser.photo ? currentUser.photo.getUrl({ width:192,
      height:192, mode:'crop' }) : null %}

      <form
        class="profile-form"
        id="profile-form"
        enctype="multipart/form-data"
      >
        <h1>Profiel Bewerken</h1>
        <p class="help">
          Werk je gegevens, e-mailnotificaties en profielfoto bij.
        </p>

        {{ csrfInput() }}
        {{ actionInput("users/save-user") }}

        {# --- Photo --- #}
        <div class="row">
          <label>Profielfoto</label>
          <div class="photo-wrap">
            <img
              class="avatar"
              id="avatarPreview"
              src="{{
                photoUrl ??
                  'data:image/svg+xml;utf8,<svg xmlns=%22http://www.w3.org/2000/svg%22 width=%2296%22 height=%2296%22><rect width=%2296%22 height=%2296%22 fill=%22%23e5e7eb%22 /><text x=%2250%25%22 y=%2250%25%22 dominant-baseline=%22middle%22 text-anchor=%22middle%22 fill=%22%23666%22 font-family=%22Arial%22 font-size=%2212%22>Geen foto</text></svg>'
              }}"
              alt="Profielfoto"
            />
            <div class="photo-controls">
              <input
                class="file-input"
                type="file"
                id="photo"
                name="photo"
                accept="image/*"
              />
              <div class="inline-actions">
                <button
                  type="button"
                  class="btn btn-outline small"
                  id="clearPhoto"
                >
                  Wijziging annuleren
                </button>
                {% if currentUser.photo %}
                <button
                  type="button"
                  class="btn btn-danger small"
                  id="removePhotoBtn"
                  style="width: auto"
                >
                  Huidige foto verwijderen
                </button>
                {% endif %}
              </div>
              <span class="muted small"
                >Ondersteunde afbeeldingen; max. grootte volgens
                serverinstellingen.</span
              >
            </div>
          </div>
        </div>

        {# --- User fields --- #}
        <div class="row">
          <label for="username">Gebruikersnaam</label>
          <input
            type="text"
            id="username"
            name="username"
            value="{{ currentUser.username }}"
            required
          />
        </div>

        <div class="row">
          <label for="email">E-mail</label>
          <input
            type="email"
            id="email"
            name="email"
            value="{{ currentUser.email }}"
            required
          />
        </div>

        <div class="row">
          <label for="currentPassword"
            >Huidig wachtwoord (alleen nodig voor wijzigen)</label
          >
          <input type="password" id="currentPassword" name="currentPassword" />
        </div>

        <div class="row">
          <label for="newPassword">Nieuw wachtwoord</label>
          <input type="password" id="newPassword" name="newPassword" />
        </div>

        {# --- Email notifications --- #}
        <div class="row">
          <label for="emailSwitch">E-mailnotificaties</label>
          <label class="switch" aria-live="polite" for="emailSwitch">
            <input type="checkbox" id="emailSwitch" class="switch-input"
            role="switch" aria-checked='{{ notify ? "true" : "false" }}'
            {{ notify ? "checked" : "" }}
            />
            <span class="switch-track" aria-hidden="true">
              <span class="switch-handle"></span>
            </span>
            <span
              id="switchLabel"
              class="switch-label {{ notify ? 'on' : '' }}"
            >
              {{ notify ? "Aan" : "Uit" }}
            </span>
          </label>
          <!-- (no extra inputs needed; JS will map to '1'/'0' for FormData) -->
        </div>

        <div class="actions">
          <button type="submit" class="btn">Opslaan</button>
          <button type="button" class="btn btn-outline" id="resetForm">
            Wijzigingen herstellen
          </button>
        </div>
      </form>
    </main>

    {% include 'global/footer.twig' %}

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const form = document.getElementById("profile-form");

        const avatarPreview = document.getElementById("avatarPreview");
        const photoInput = document.getElementById("photo");
        const clearPhotoBtn = document.getElementById("clearPhoto");
        const resetBtn = document.getElementById("resetForm");
        const removePhotoBtn = document.getElementById("removePhotoBtn");

        // Popup refs
        const popup = document.getElementById("popup");
        const popupCard = document.getElementById("popupCard");
        const popupTitle = document.getElementById("popup-title");
        const popupDesc = document.getElementById("popup-desc");
        const popupClose = document.getElementById("popupClose");
        let lastFocused = null;

        // Switch refs
        const emailSwitch = document.getElementById("emailSwitch");
        const switchLabel = document.getElementById("switchLabel");

        // Initial values
        const initialValues = {
          username: "{{ currentUser.username|e('js') }}",
          email: "{{ currentUser.email|e('js') }}",
          emailNotifications:
            "{{ (currentUser.emailNotifications ?? currentUser.getFieldValue('emailNotifications')) ? '1' : '0' }}",
        };
        const initialPhotoUrl = avatarPreview.getAttribute("src");

        // ---- Popup helpers
        function openPopup(type /* 'success' | 'error' */, html) {
          popupCard.classList.remove("success", "error");
          popupCard.classList.add(type);
          const isSuccess = type === "success";
          popupTitle.textContent = isSuccess ? "Gelukt" : "Fout";
          popupCard.querySelector(".icon").textContent = isSuccess ? "â" : "!";
          popupDesc.innerHTML = html || "";

          lastFocused = document.activeElement;
          popup.classList.add("show");
          popupCard.setAttribute(
            "aria-live",
            isSuccess ? "polite" : "assertive"
          );
          popupCard.focus();

          const closeNow = () => closePopup();
          popupClose.onclick = closeNow;
          popup.onclick = (e) => {
            if (e.target === popup) closeNow();
          };
          document.addEventListener("keydown", escHandler);

          if (isSuccess) {
            clearTimeout(openPopup._timer);
            openPopup._timer = setTimeout(closePopup, 1800);
          }
        }
        function escHandler(e) {
          if (e.key === "Escape") closePopup();
        }
        function closePopup() {
          popup.classList.remove("show");
          document.removeEventListener("keydown", escHandler);
          if (lastFocused && typeof lastFocused.focus === "function")
            lastFocused.focus();
        }
        // unified "show" for success/error
        function show(ok, html) {
          openPopup(ok ? "success" : "error", html);
        }

        // ---- Switch label live update
        function updateSwitchLabel() {
          const on = emailSwitch.checked;
          emailSwitch.setAttribute("aria-checked", on ? "true" : "false");
          switchLabel.textContent = on ? "Aan" : "Uit";
          switchLabel.classList.toggle("on", on);
        }
        emailSwitch?.addEventListener("change", updateSwitchLabel);
        updateSwitchLabel();

        // ---- Photo preview/reset
        photoInput?.addEventListener("change", function () {
          const file = this.files && this.files[0];
          if (!file) return;
          const reader = new FileReader();
          reader.onload = (e) => {
            avatarPreview.src = e.target.result;
          };
          reader.readAsDataURL(file);
        });

        clearPhotoBtn?.addEventListener("click", function () {
          if (photoInput) photoInput.value = "";
          avatarPreview.src = initialPhotoUrl;
        });

        // ---- Remove server photo
        removePhotoBtn?.addEventListener("click", async function () {
          if (!confirm("Weet je zeker dat je je huidige foto wil verwijderen?"))
            return;
          try {
            const resp = await fetch(
              "/index.php?action=users/delete-user-photo",
              {
                method: "POST",
                headers: {
                  "X-CSRF-Token": "{{ craft.app.request.csrfToken }}",
                },
              }
            );
            if (resp.ok) {
              show(true, "Foto verwijderd.");
              setTimeout(() => window.location.reload(), 900);
            } else {
              show(false, "Kon foto niet verwijderen.");
            }
          } catch (e) {
            console.error(e);
            show(false, "Netwerkfout bij verwijderen.");
          }
        });

        // ---- Reset
        resetBtn?.addEventListener("click", function () {
          document.getElementById("username").value = initialValues.username;
          document.getElementById("email").value = initialValues.email;

          emailSwitch.checked = initialValues.emailNotifications === "1";
          updateSwitchLabel();

          clearPhotoBtn?.click();
          document.getElementById("newPassword").value = "";
          document.getElementById("currentPassword").value = "";
        });

        // ---- Submit (diff-only payload)
        form.addEventListener("submit", async function (e) {
          e.preventDefault();

          const data = new FormData();
          const current = {
            username: document.getElementById("username").value,
            email: document.getElementById("email").value,
            newPassword: document.getElementById("newPassword").value,
            currentPassword: document.getElementById("currentPassword").value,
            emailNotifications: emailSwitch.checked ? "1" : "0",
          };

          for (const [key, value] of Object.entries(current)) {
            if (key === "newPassword" && !value) continue;
            if (key === "currentPassword" && !current.newPassword) continue;

            if (value !== initialValues[key]) {
              if (key === "emailNotifications") {
                data.append("fields[emailNotifications]", value);
              } else {
                data.append(key, value);
              }
            }
          }

          if (photoInput && photoInput.files && photoInput.files.length > 0) {
            data.append("photo", photoInput.files[0]);
          }

          data.append(
            "CRAFT_CSRF_TOKEN",
            "{{ craft.app.request.getCsrfToken() }}"
          );
          data.append("action", "users/save-user");
          data.append("userId", "{{ currentUser.id }}");

          try {
            const resp = await fetch("/index.php?action=users/save-user", {
              method: "POST",
              body: data,
              headers: {
                Accept: "application/json",
                "X-Requested-With": "XMLHttpRequest",
              },
            });

            let json = {};
            try {
              json = await resp.json();
            } catch (_) {}

            if (
              resp.ok &&
              (json.success ||
                json.message === "User saved." ||
                !Object.keys(json).length)
            ) {
              show(true, "Profiel succesvol bijgewerkt!");
              setTimeout(() => window.location.reload(), 1200);
            } else {
              const errors =
                Object.values(json.errors || {})
                  .flat()
                  .join("<br>") ||
                json.message ||
                "Er is een fout opgetreden. Probeer het opnieuw.";
              show(false, errors);
            }
          } catch (err) {
            console.error(err);
            show(false, "Er is een fout opgetreden. Probeer het opnieuw.");
          }
        });
      });
    </script>

    <div
      id="popup"
      class="popup"
      role="alertdialog"
      aria-modal="true"
      aria-labelledby="popup-title"
      aria-describedby="popup-desc"
    >
      <div id="popupCard" class="popup-card" tabindex="-1">
        <div class="popup-head">
          <span class="icon" aria-hidden="true">â</span>
          <h2 id="popup-title" class="popup-title">Melding</h2>
        </div>
        <div id="popup-desc" class="popup-body"></div>
        <div class="popup-actions">
          <button id="popupClose" type="button" class="btn-ghost">
            Sluiten
          </button>
        </div>
      </div>
    </div>
  </body>
</html>
