{% include 'global/nav.twig' %}

<!DOCTYPE html>
<html lang="nl">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Drankjes – POS</title>
    <link
      rel="icon"
      type="image/x-icon"
      href="{{ siteUrl('uploads/favicon_io/favicon.ico') }}"
    />

    <style>
      :root {
        --cream: #fdfaf6;
        --soft-red: #d9534f;
        --soft-red-dark: #b52e2a;
        --text: #333;
        --muted: #6b6b6b;
        --card: #ffffff;
        --ring: #e9e9e9;
        --shadow: 0 4px 10px rgba(0, 0, 0, 0.06);
        --tint: #fff7f5;
      }

      body {
        margin: 0;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        font-family: Arial, sans-serif;
        color: var(--text);
        background: var(--cream);
      }
      main {
        margin-left: 200px;
        padding: 2rem;
        flex: 1;
      }

      .pos-grid {
        display: grid;
        grid-template-columns: minmax(340px, 1.4fr) minmax(280px, 1fr);
        gap: 1.5rem;
        align-items: start;
        margin-top: 1rem;
        margin-left: 1rem;
      }

      .panel {
        background: var(--card);
        border: 1px solid var(--ring);
        border-radius: 12px;
        box-shadow: var(--shadow);
        overflow: hidden;
      }
      .panel-header {
        padding: 12px 16px;
        background: var(--tint);
        border-bottom: 1px solid var(--ring);
        color: var(--soft-red-dark);
        font-weight: 700;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }
      .panel-body {
        padding: 12px 16px;
      }

      .tools {
        display: flex;
        gap: 10px;
        margin-bottom: 10px;
        flex-wrap: wrap;
      }
      .input {
        border: 1px solid var(--ring);
        border-radius: 8px;
        padding: 10px 12px;
        background: #fff;
      }
      .drinks-list {
        display: grid;
        grid-template-columns: 1fr;
        gap: 10px;
        max-height: calc(100vh - 240px);
        overflow: auto;
        padding-right: 4px;
      }
      .drink-row {
        display: grid;
        grid-template-columns: 48px 1fr auto;
        gap: 12px;
        align-items: center;
        padding: 10px;
        border: 1px solid var(--ring);
        border-radius: 10px;
        background: #fff;
        transition: background 0.15s ease, border-color 0.15s ease;
      }
      .drink-row:hover {
        background: var(--tint);
        border-color: var(--soft-red);
      }
      .thumb {
        width: 48px;
        height: 48px;
        border-radius: 50%;
        object-fit: cover;
        border: 1px solid #eee;
        background: #f4f4f4;
      }
      .dname {
        margin: 0;
        font-weight: 700;
        color: var(--soft-red-dark);
        font-size: 1rem;
      }
      .dmeta {
        margin: 2px 0 0;
        color: var(--muted);
        font-size: 0.9rem;
      }
      .price {
        color: var(--soft-red-dark);
        font-weight: 700;
        white-space: nowrap;
      }

      .btn {
        appearance: none;
        border: none;
        border-radius: 8px;
        padding: 9px 12px;
        font-weight: 700;
        cursor: pointer;
        transition: background 0.15s, color 0.15s, border-color 0.15s,
          transform 0.1s;
      }
      .btn-add {
        background: var(--soft-red);
        color: var(--cream);
        border: 2px solid var(--soft-red);
      }
      .btn-add:hover {
        background: var(--soft-red-dark);
        border-color: var(--soft-red-dark);
        transform: translateY(-1px);
      }
      .btn-outline {
        background: #fff;
        color: var(--soft-red);
        border: 2px solid var(--soft-red);
      }
      .btn-outline:hover {
        background: var(--soft-red);
        color: var(--cream);
      }

      .cart {
        position: sticky;
        top: 1rem;
      }
      .cart-items {
        display: flex;
        flex-direction: column;
        gap: 8px;
      }
      .cart-row {
        display: grid;
        grid-template-columns: 1fr auto;
        gap: 10px;
        align-items: center;
        border: 1px solid var(--ring);
        border-radius: 10px;
        padding: 10px 12px;
        background: #fff;
      }
      .qty {
        display: inline-grid;
        grid-auto-flow: column;
        gap: 6px;
        align-items: center;
      }
      .qty .qbtn {
        width: 28px;
        height: 28px;
        border-radius: 6px;
        border: 2px solid var(--soft-red);
        background: #fff;
        color: var(--soft-red);
        font-weight: 900;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      .qty .qbtn:hover {
        background: var(--soft-red);
        color: var(--cream);
      }
      .line {
        color: var(--muted);
        font-size: 0.92rem;
      }
      .line strong {
        color: var(--soft-red-dark);
      }

      .cart-footer {
        border-top: 1px solid var(--ring);
        margin-top: 12px;
        padding-top: 12px;
        display: grid;
        gap: 10px;
      }
      .total {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-weight: 800;
        color: var(--soft-red-dark);
      }
      .cta-row {
        display: grid;
        grid-template-columns: 1fr;
        gap: 10px;
      }
      .btn-pay {
        background: var(--soft-red);
        color: var(--cream);
        border: 2px solid var(--soft-red);
        justify-self: start;
      }
      .btn-pay:hover {
        background: var(--soft-red-dark);
        border-color: var(--soft-red-dark);
      }

      .notice {
        background: var(--soft-red);
        color: var(--cream);
        padding: 10px 14px;
        border-radius: 10px;
        border: 1px solid var(--soft-red-dark);
        box-shadow: var(--shadow);
        position: fixed;
        top: 14px;
        left: 50%;
        transform: translateX(-50%);
        z-index: 1000;
        opacity: 0;
        transition: opacity 0.3s;
        font-weight: 600;
      }
      .notice.hidden {
        display: none;
      }

      @media (max-width: 1000px) {
        .pos-grid {
          grid-template-columns: 1fr;
        }
        .cart {
          position: static;
        }
      }
      @media (max-width: 700px) {
        main {
          padding: 1.25rem;
        }
      }
    </style>
  </head>

  <body>
    <main>
      {% include 'global/header.twig' %}

      <div class="pos-grid">
        <section class="panel">
          <div class="panel-header">
            <span>Drankjes</span>
          </div>
          <div class="panel-body">
            <div class="tools">
              <input
                id="search"
                class="input"
                type="text"
                placeholder="Zoek drankjes…"
              />
              <select id="filterCat" class="input">
                <option value="">Alle categorieën</option>
                <option value="bier">Bier</option>
                <option value="wijn">Wijn</option>
                <option value="fris">Fris</option>
              </select>
            </div>

            <div id="drinksList" class="drinks-list">
              {% set drinks = craft.entries.section('drinks').all() %} {% if
              drinks|length %} {% for drink in drinks %} {% set img =
              drink.image.one() %} {% set catLabel = drink.category ?
              (drink.category.label ?? drink.category.value) : '—' %} {% set
              priceMoney = drink.price ?? null %} {% set priceNumber =
              priceMoney ? (priceMoney.getAmount() / 100) : 0 %} {% set
              priceDisplay = priceMoney ?
              craft.app.formatter.asCurrency(priceNumber,
              priceMoney.getCurrency().getCode()) : '—' %}

              <article
                class="drink-row"
                data-name="{{ drink.title | lower }}"
                data-cat="{{ catLabel | lower }}"
                data-visible="{{ drink.drinkVisibility ? '1' : '0' }}"
                data-id="{{ drink.id }}"
                data-price="{{ priceNumber }}"
                data-title="{{ drink.title }}"
              >
                <img
                  class="thumb"
                  src="{{
                    img ? img.getUrl() : 'https://via.placeholder.com/64'
                  }}"
                  alt="{{ drink.title }}"
                />
                <div>
                  <h3 class="dname">{{ drink.title }}</h3>
                  <p class="dmeta">Categorie: {{ catLabel }}</p>
                </div>

                <div style="display: flex; align-items: center; gap: 10px">
                  <span class="price">{{ priceDisplay }}</span>
                  {% if drink.drinkVisibility %}
                  <button
                    class="btn btn-add add-btn"
                    data-mode="{{ currentUser ? 'user' : 'guest' }}"
                  >
                    Toevoegen
                  </button>
                  {% else %}
                  <button class="btn btn-outline" disabled>
                    Niet beschikbaar
                  </button>
                  {% endif %}
                </div>
              </article>
              {% endfor %} {% else %}
              <p class="dmeta">Geen drankjes beschikbaar.</p>
              {% endif %}
            </div>
          </div>
        </section>

        <aside class="panel cart">
          <div class="panel-header">Jouw selectie</div>
          <div class="panel-body">
            <div id="cartItems" class="cart-items"></div>

            <div class="cart-footer">
              <div class="total">
                <span>Totaal</span>
                <span id="cartTotal">€ 0,00</span>
              </div>
              <div class="cta-row">
                <a class="btn btn-pay" href="{{ url('tabs') }}">Afrekenen</a>
              </div>
              <p class="dmeta" style="margin: 6px 0 0">
                Items worden direct toegevoegd aan je rekening. Beheer en betaal
                op de
                <a
                  href="{{ url('tabs') }}"
                  style="
                    color: var(--soft-red);
                    font-weight: 700;
                    text-decoration: none;
                  "
                  >rekeningpagina</a
                >.
              </p>
            </div>
          </div>
        </aside>
      </div>

      <!-- Guest Checkout Modal -->
      <div
        id="guestModal"
        style="
          display: none;
          position: fixed;
          inset: 0;
          z-index: 1000;
          background: rgba(0, 0, 0, 0.35);
        "
      >
        <div
          style="
            max-width: 420px;
            margin: 10vh auto;
            background: #fff;
            border-radius: 12px;
            border: 1px solid var(--ring);
            box-shadow: var(--shadow);
            overflow: hidden;
          "
        >
          <div class="panel-header">Afrekenen als gast</div>
          <div class="panel-body" style="display: grid; gap: 10px">
            <label class="dmeta" style="display: grid; gap: 6px">
              Naam of team
              <input
                id="guestName"
                class="input"
                placeholder="bv. Supporter 12"
              />
            </label>
            <label class="dmeta" style="display: grid; gap: 6px">
              Tafel / veld (optioneel)
              <input id="guestTable" class="input" placeholder="bv. Tafel 7" />
            </label>
            <div style="display: flex; gap: 10px; justify-content: flex-end">
              <button id="guestCancel" class="btn btn-outline">
                Annuleren
              </button>
              <button id="guestConfirm" class="btn btn-add">
                Bevestigen & afrekenen
              </button>
            </div>
            <p
              class="dmeta"
              id="guestError"
              style="color: var(--soft-red-dark); display: none"
            >
              Vul minstens een naam in.
            </p>
          </div>
        </div>
      </div>
    </main>

    <div
      id="notice"
      class="notice hidden"
      role="status"
      aria-live="polite"
    ></div>

    {% include 'global/footer.twig' %}

    <script>
                  document.addEventListener('DOMContentLoaded', () => {
                    // --- config / endpoints ---
                    const IS_LOGGED_IN = {{ currentUser ? 'true' : 'false' }};
                    const CSRF_NAME  = '{{ craft.app.config.general.csrfTokenName }}';
                    const CSRF_VALUE = '{{ craft.app.request.csrfToken|e('js') }}';
                    const ADD_TO_TAB_URL = '{{ actionUrl("tabs/add") }}';
                    const REMOVE_FROM_TAB_URL = '{{ actionUrl("tabs/remove") }}';
                    const START_GUEST_URL = '{{ actionUrl("tabs/start-guest") }}';
                    const CART_KEY = IS_LOGGED_IN ? 'pos_cart_user_{{ currentUser ? currentUser.id : 0 }}' : 'pos_cart_guest';
                    const fmt = new Intl.NumberFormat('nl-BE', { style:'currency', currency:'EUR' });

                    // toast
                    const noticeEl = document.getElementById('notice');
                    function toast(msg){
                      if (!noticeEl) return;
                      noticeEl.textContent = msg;
                      noticeEl.classList.remove('hidden');
                      requestAnimationFrame(()=> noticeEl.style.opacity = 1);
                      setTimeout(()=>{ noticeEl.style.opacity = 0; noticeEl.classList.add('hidden'); }, 1800);
                    }

                    // state
                    let state = loadState();
                    function loadState(){
                      try{
                        const o = JSON.parse(localStorage.getItem(CART_KEY) || '{"items":{}}');
                        for(const it of Object.values(o.items||{})){
                          it.price = +it.price || 0;
                          it.qty = +it.qty || 0;
                          it.pending = +it.pending || 0;
                        }
                        return { items: o.items || {} };
                      }catch(_){ return { items:{} }; }
                    }
                    function saveState(){ localStorage.setItem(CART_KEY, JSON.stringify(state)); }

                    // DOM
                    const drinksListEl = document.getElementById('drinksList');
                    const cartItemsEl = document.getElementById('cartItems');
                    const totalEl = document.getElementById('cartTotal');

                    function renderCart(){
                      if (!cartItemsEl || !totalEl) return;
                      cartItemsEl.innerHTML = '';
                      const items = Object.values(state.items);
                      if (!items.length){
                        cartItemsEl.innerHTML = '<p class="dmeta">Nog geen items. Voeg links drankjes toe.</p>';
                        totalEl.textContent = fmt.format(0);
                        return;
                      }
                      let total = 0;
                      for (const it of items){
                        total += it.price * it.qty;
                        const row = document.createElement('div');
                        row.className = 'cart-row';
                        row.innerHTML = `
                          <div class="line"><strong>${it.title}</strong><br>
                            <span>${fmt.format(it.price)} × ${it.qty}${IS_LOGGED_IN && it.pending>0 ? ` <em style="opacity:.7">(+${it.pending} in wachtrij)</em>`:''}</span>
                          </div>
                          <div class="qty">
                            <button class="qbtn" data-action="dec" data-id="${it.id}">−</button>
                            <button class="qbtn" data-action="inc" data-id="${it.id}">＋</button>
                          </div>`;
                        cartItemsEl.appendChild(row);
                      }
                      totalEl.textContent = fmt.format(total);
                    }

                    // server (only when logged in)
                    async function addOneServer(id){
                      const body = new URLSearchParams();
                      body.append('drinkId', id);
                      body.append('qty', '1');
                      body.append(CSRF_NAME, CSRF_VALUE);
                      const res = await fetch(ADD_TO_TAB_URL, {
                        method:'POST',
                        headers:{ 'Accept':'application/json','Content-Type':'application/x-www-form-urlencoded' },
                        body: body.toString()
                      });
                      const j = await res.json().catch(()=>({}));
                      if(!res.ok || !j.success) throw new Error('server add failed');
                      return j.merged ? 'Aantal verhoogd!' : 'Toegevoegd aan je rekening!';
                    }
                    async function removeOneServer(id){
                      if(!REMOVE_FROM_TAB_URL) return;
                      const body = new URLSearchParams();
                      body.append('drinkId', id);
                      body.append('qty', '1');
                      body.append(CSRF_NAME, CSRF_VALUE);
                      await fetch(REMOVE_FROM_TAB_URL, {
                        method:'POST',
                        headers:{ 'Accept':'application/json','Content-Type':'application/x-www-form-urlencoded' },
                        body: body.toString()
                      });
                    }

                    // add / inc / dec
                    async function addOne(id, title, price){
                      const it = state.items[id] || { id, title, price:+price||0, qty:0, pending:0 };
                      it.qty += 1;
                      if (IS_LOGGED_IN) it.pending += 1;
                      state.items[id] = it; saveState(); renderCart();

                      if (IS_LOGGED_IN){
                        try{
                          const msg = await addOneServer(id);
                          const now = state.items[id];
                          if (now){ now.pending = Math.max(0, now.pending-1); saveState(); renderCart(); }
                          toast(msg);
                        }catch(_){ toast('Wachten op verbinding… item blijft in de wachtrij.'); }
                      }
                    }
                    async function inc(id){
                      const it = state.items[id]; if(!it) return;
                      await addOne(it.id, it.title, it.price);
                    }
                    async function dec(id){
                      const it = state.items[id]; if (!it) return;
                      if (IS_LOGGED_IN && it.pending>0){
                        it.pending--; it.qty--;
                        if (it.qty<=0) delete state.items[id];
                        saveState(); renderCart();
                        return;
                      }
                      it.qty--;
                      if (it.qty<=0) delete state.items[id];
                      saveState(); renderCart();
                      if (IS_LOGGED_IN) { try{ await removeOneServer(id); }catch(_){} }
                    }

                    async function flushPending(){
                      if (!IS_LOGGED_IN) return;
                      const items = Object.values(state.items);
                      for (const it of items){
                        let n = Math.min(20, it.pending||0);
                        while(n-- > 0){
                          try{
                            const msg = await addOneServer(it.id);
                            it.pending = Math.max(0, it.pending-1); saveState(); renderCart();
                            if (n === it.pending) toast(`${it.title}: ${msg}`);
                          }catch(_){ break; }
                        }
                      }
                    }

                    // ---- Event delegation for add buttons (robust for guests) ----
                    if (drinksListEl){
                      drinksListEl.addEventListener('click', (e)=>{
                        const btn = e.target.closest('.add-btn');
                        if (!btn) return;
                        const row = btn.closest('.drink-row');
                        if (!row) return;
                        const id = row.dataset.id;
                        const title = row.dataset.title;
                        const price = parseFloat(row.dataset.price || '0');
                        if (!id || !title) return;
                        addOne(id, title, price);
                      });
                    }

                    // qty buttons (delegated)
                    if (cartItemsEl){
                      cartItemsEl.addEventListener('click', (e)=>{
                        const b = e.target.closest('.qbtn'); if(!b) return;
                        const id = b.dataset.id; const a = b.dataset.action;
                        if (a === 'inc') inc(id); else dec(id);
                      });
                    }

                    // search/filter
                    const searchEl = document.getElementById('search');
                    const filterCatEl = document.getElementById('filterCat');
                    function applyFilters(){
                      const term = (searchEl?.value||'').trim().toLowerCase();
                      const cat = (filterCatEl?.value||'').trim().toLowerCase();
                      document.querySelectorAll('.drink-row').forEach(row=>{
                        const matchName = row.dataset.name.includes(term);
                        const matchCat  = !cat || row.dataset.cat === cat;
                        const visible   = row.dataset.visible === '1';
                        row.style.display = (matchName && matchCat && visible) ? '' : 'none';
                      });
                    }
                    searchEl?.addEventListener('input', applyFilters);
                    filterCatEl?.addEventListener('change', applyFilters);

                    // guest checkout modal
                    const payBtn = document.querySelector('.btn-pay');
                    const modal = document.getElementById('guestModal');
                    const guestName = document.getElementById('guestName');
                    const guestTable = document.getElementById('guestTable');
                    const guestCancel = document.getElementById('guestCancel');
                    const guestConfirm = document.getElementById('guestConfirm');
                    const guestError = document.getElementById('guestError');

                    if (payBtn){
                      payBtn.addEventListener('click', async (e)=>{
                        if (IS_LOGGED_IN){
                          e.preventDefault();
                          const original = payBtn.textContent;
                          payBtn.textContent = 'Synchroniseren…';
                          payBtn.style.pointerEvents = 'none';
                          payBtn.setAttribute('disabled', 'disabled');
                          try{ await flushPending(); }catch(_){}
                          setTimeout(()=>{ window.location.href = payBtn.href; }, 150);
                        } else {
                          e.preventDefault();
                          if (modal){ modal.style.display = 'block'; }
                          if (guestError){ guestError.style.display = 'none'; }
                          guestName?.focus();
                        }
                      });
                    }
                    guestCancel?.addEventListener('click', ()=> modal && (modal.style.display='none'));

                   guestConfirm?.addEventListener('click', async ()=>{
              const name = (guestName?.value||'').trim();
              const table = (guestTable?.value||'').trim();
              if (!name){ guestError.style.display='block'; return; }

              const items = Object.values(state.items).filter(it=>it.qty>0).map(it=>({ id: it.id, qty: it.qty }));
              if (!items.length){ toast('Je mandje is leeg.'); if (modal) modal.style.display='none'; return; }

              const body = new URLSearchParams();
              body.append('name', name);
              body.append('table', table);
              body.append('cart', JSON.stringify(items));
              body.append(CSRF_NAME, CSRF_VALUE);

              guestConfirm.setAttribute('disabled','disabled');
              guestConfirm.textContent='Aanmaken…';

              try{
                const res = await fetch(START_GUEST_URL, {
                  method:'POST',
                  headers:{ 'Accept':'application/json','Content-Type':'application/x-www-form-urlencoded' },
                  body: body.toString()
                });
                const text = await res.text();
                let j = {};
                try { j = JSON.parse(text); } catch(_) {}
               // after a successful start-guest response
      if (j.tabId) {
        localStorage.setItem('guest_last_tab', String(j.tabId));
      }
      state = { items:{} };
      saveState();
      window.location.href = j.redirect || '{{ url('tabs') }}';

              }catch(e){
                guestConfirm.removeAttribute('disabled');
                guestConfirm.textContent='Bevestigen & afrekenen';
                toast(e.message || 'Kon geen gastrekening aanmaken.');
              }
            });


                    // init
                    applyFilters();
                    renderCart();
                    flushPending();
                  });
    </script>
  </body>
</html>
