{% include 'global/nav.twig' %}

<!DOCTYPE html>
<html lang="nl">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Drankjes – POS</title>
    <link
      rel="icon"
      type="image/x-icon"
      href="{{ siteUrl('uploads/favicon_io/favicon.ico') }}"
    />

    <style>
      :root {
        --cream: #fdfaf6;
        --soft-red: #d9534f;
        --soft-red-dark: #b52e2a;
        --text: #333;
        --muted: #6b6b6b;
        --card: #ffffff;
        --ring: #e9e9e9;
        --shadow: 0 4px 10px rgba(0, 0, 0, 0.06);
        --tint: #fff7f5;
      }

      body {
        margin: 0;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        font-family: Arial, sans-serif;
        color: var(--text);
        background: var(--cream);
      }
      main {
        margin-left: 200px;
        padding: 2rem;
        flex: 1;
      }

      /* Layout: left menu | right cart */
      .pos-grid {
        display: grid;
        grid-template-columns: minmax(340px, 1.4fr) minmax(280px, 1fr);
        gap: 1.5rem;
        align-items: start;
        margin-top: 1rem;
        margin-left: 1rem;
      }

      .panel {
        background: var(--card);
        border: 1px solid var(--ring);
        border-radius: 12px;
        box-shadow: var(--shadow);
        overflow: hidden;
      }
      .panel-header {
        padding: 12px 16px;
        background: var(--tint);
        border-bottom: 1px solid var(--ring);
        color: var(--soft-red-dark);
        font-weight: 700;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }
      .panel-body {
        padding: 12px 16px;
      }

      /* Left: drinks list */
      .tools {
        display: flex;
        gap: 10px;
        margin-bottom: 10px;
        flex-wrap: wrap;
      }
      .input {
        border: 1px solid var(--ring);
        border-radius: 8px;
        padding: 10px 12px;
        background: #fff;
      }
      .drinks-list {
        display: grid;
        grid-template-columns: 1fr;
        gap: 10px;
        max-height: calc(100vh - 240px);
        overflow: auto;
        padding-right: 4px;
      }
      .drink-row {
        display: grid;
        grid-template-columns: 48px 1fr auto;
        gap: 12px;
        align-items: center;
        padding: 10px;
        border: 1px solid var(--ring);
        border-radius: 10px;
        background: #fff;
        transition: background 0.15s ease, border-color 0.15s ease;
      }
      .drink-row:hover {
        background: var(--tint);
        border-color: var(--soft-red);
      }
      .thumb {
        width: 48px;
        height: 48px;
        border-radius: 50%;
        object-fit: cover;
        border: 1px solid #eee;
        background: #f4f4f4;
      }
      .dname {
        margin: 0;
        font-weight: 700;
        color: var(--soft-red-dark);
        font-size: 1rem;
      }
      .dmeta {
        margin: 2px 0 0;
        color: var(--muted);
        font-size: 0.9rem;
      }
      .price {
        color: var(--soft-red-dark);
        font-weight: 700;
        white-space: nowrap;
      }

      .btn {
        appearance: none;
        border: none;
        border-radius: 8px;
        padding: 9px 12px;
        font-weight: 700;
        cursor: pointer;
        transition: background 0.15s ease, color 0.15s ease,
          border-color 0.15s ease, transform 0.1s ease;
      }
      .btn-add {
        background: var(--soft-red);
        color: var(--cream);
        border: 2px solid var(--soft-red);
      }
      .btn-add:hover {
        background: var(--soft-red-dark);
        border-color: var(--soft-red-dark);
        transform: translateY(-1px);
      }

      .btn-outline {
        background: #fff;
        color: var(--soft-red);
        border: 2px solid var(--soft-red);
      }
      .btn-outline:hover {
        background: var(--soft-red);
        color: var(--cream);
      }

      /* Right: selection/cart */
      .cart {
        position: sticky;
        top: 1rem;
      }
      .cart-items {
        display: flex;
        flex-direction: column;
        gap: 8px;
      }
      .cart-row {
        display: grid;
        grid-template-columns: 1fr auto;
        gap: 10px;
        align-items: center;
        border: 1px solid var(--ring);
        border-radius: 10px;
        padding: 10px 12px;
        background: #fff;
      }
      .qty {
        display: inline-grid;
        grid-auto-flow: column;
        gap: 6px;
        align-items: center;
      }
      .qty .qbtn {
        width: 28px;
        height: 28px;
        border-radius: 6px;
        border: 2px solid var(--soft-red);
        background: #fff;
        color: var(--soft-red);
        font-weight: 900;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      .qty .qbtn:hover {
        background: var(--soft-red);
        color: var(--cream);
      }
      .line {
        color: var(--muted);
        font-size: 0.92rem;
      }
      .line strong {
        color: var(--soft-red-dark);
      }

      .cart-footer {
        border-top: 1px solid var(--ring);
        margin-top: 12px;
        padding-top: 12px;
        display: grid;
        gap: 10px;
      }
      .total {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-weight: 800;
        color: var(--soft-red-dark);
      }
      .cta-row {
        display: grid;
        grid-template-columns: 1fr;
        gap: 10px;
      } /* single button for users */

      .btn-pay {
        background: var(--soft-red);
        color: var(--cream);
        border: 2px solid var(--soft-red);
        justify-self: start; /* pay button aligned left */
      }
      .btn-pay:hover {
        background: var(--soft-red-dark);
        border-color: var(--soft-red-dark);
      }

      .notice {
        background: var(--soft-red);
        color: var(--cream);
        padding: 10px 14px;
        border-radius: 10px;
        border: 1px solid var(--soft-red-dark);
        box-shadow: var(--shadow);
        position: fixed;
        top: 14px;
        left: 50%;
        transform: translateX(-50%);
        z-index: 1000;
        opacity: 0;
        transition: opacity 0.3s ease;
        font-weight: 600;
      }
      .notice.hidden {
        display: none;
      }

      @media (max-width: 1000px) {
        .pos-grid {
          grid-template-columns: 1fr;
        }
        .cart {
          position: static;
        }
      }
      @media (max-width: 700px) {
        main {
          padding: 1.25rem;
        }
      }
    </style>
  </head>
  <body>
    <main>
      {% include 'global/header.twig' %}

      <div class="pos-grid">
        <!-- LEFT: Drinks -->
        <section class="panel">
          <div class="panel-header">
            <span>Drankjes</span>
            {# No +Nieuw button on the user page #}
          </div>
          <div class="panel-body">
            <div class="tools">
              <input
                id="search"
                class="input"
                type="text"
                placeholder="Zoek drankjes…"
              />
              <select id="filterCat" class="input">
                <option value="">Alle categorieën</option>
                <option value="bier">Bier</option>
                <option value="wijn">Wijn</option>
                <option value="fris">Fris</option>
              </select>
            </div>

            <div id="drinksList" class="drinks-list">
              {% for drink in craft.entries.section('drinks').all() %} {% set
              img = drink.image.one() %} {% set catLabel = drink.category ?
              (drink.category.label ?? drink.category.value) : '—' %} {% set
              priceMoney = drink.price ?? null %} {% set priceNumber =
              priceMoney ? (priceMoney.getAmount() / 100) : 0 %} {% set
              priceDisplay = priceMoney ?
              craft.app.formatter.asCurrency(priceNumber,
              priceMoney.getCurrency().getCode()) : '—' %}

              <article
                class="drink-row"
                data-name="{{ drink.title | lower }}"
                data-cat="{{ catLabel | lower }}"
                data-visible="{{ drink.drinkVisibility ? '1' : '0' }}"
                data-id="{{ drink.id }}"
                data-price="{{ priceNumber }}"
                data-title="{{ drink.title }}"
              >
                <img
                  class="thumb"
                  src="{{
                    img ? img.getUrl() : 'https://via.placeholder.com/64'
                  }}"
                  alt="{{ drink.title }}"
                />
                <div>
                  <h3 class="dname">{{ drink.title }}</h3>
                  <p class="dmeta">Categorie: {{ catLabel }}</p>
                </div>
                <div style="display: flex; align-items: center; gap: 10px">
                  <span class="price">{{ priceDisplay }}</span>
                  {% if currentUser and drink.drinkVisibility %}
                  <button class="btn btn-add add-btn">Toevoegen</button>
                  {% elseif currentUser %}
                  <button class="btn btn-outline" disabled>
                    Niet beschikbaar
                  </button>
                  {% else %}
                  <a class="btn btn-outline" href="{{ url('login') }}">Login</a>
                  {% endif %}
                </div>
              </article>
              {% else %}
              <p class="dmeta">Geen drankjes beschikbaar.</p>
              {% endfor %}
            </div>
          </div>
        </section>

        <!-- RIGHT: Selection -->
        <aside class="panel cart">
          <div class="panel-header">Jouw selectie</div>
          <div class="panel-body">
            <div id="cartItems" class="cart-items"></div>

            <div class="cart-footer">
              <div class="total">
                <span>Totaal</span>
                <span id="cartTotal">€ 0,00</span>
              </div>
              <div class="cta-row">
                <a class="btn btn-pay" href="{{ url('tabs') }}">Afrekenen</a>
              </div>
              <p class="dmeta" style="margin: 6px 0 0">
                Items worden direct toegevoegd aan je rekening. Beheer en betaal
                op de
                <a
                  href="{{ url('tabs') }}"
                  style="
                    color: var(--soft-red);
                    font-weight: 700;
                    text-decoration: none;
                  "
                  >rekeningpagina</a
                >.
              </p>
            </div>
          </div>
        </aside>
      </div>
    </main>

    <div
      id="notice"
      class="notice hidden"
      role="status"
      aria-live="polite"
    ></div>

    {% include 'global/footer.twig' %} {% if currentUser %} {% if currentUser %}
    <script>
            // --- config / endpoints ---
            const CSRF_NAME  = '{{ craft.app.config.general.csrfTokenName }}';
            const CSRF_VALUE = '{{ craft.app.request.csrfToken|e('js') }}';
            const ADD_TO_TAB_URL    = '{{ actionUrl("tabs/add") }}';
            const REMOVE_FROM_TAB_URL = '{{ actionUrl("tabs/remove") }}'; // optional
            const USER_ID = '{{ currentUser.id }}';
            const CART_KEY = `pos_cart_user_${USER_ID}`;

            // --- utils ---
            const fmt = new Intl.NumberFormat('nl-BE', { style:'currency', currency:'EUR' });
            const noticeEl = document.getElementById('notice');
            function toast(msg){
              noticeEl.textContent = msg;
              noticeEl.classList.remove('hidden');
              requestAnimationFrame(()=> noticeEl.style.opacity = 1);
              setTimeout(()=>{ noticeEl.style.opacity = 0; noticeEl.classList.add('hidden'); }, 1800);
            }

            // --- local cart state (with pending sync) ---
            // Structure in localStorage:
            // { items: { [id]: { id, title, price, qty, pending } } }
            let state = loadState();
            function loadState(){
              try{
                const raw = localStorage.getItem(CART_KEY);
                const obj = raw ? JSON.parse(raw) : { items:{} };
                obj.items ||= {};
                // coerce numbers
                for (const it of Object.values(obj.items)){
                  it.price = Number(it.price)||0;
                  it.qty = Number(it.qty)||0;
                  it.pending = Number(it.pending)||0;
                }
                return obj;
              }catch(_){ return { items:{} }; }
            }
            function saveState(){
              localStorage.setItem(CART_KEY, JSON.stringify(state));
            }

            // --- DOM refs ---
            const cartItemsEl = document.getElementById('cartItems');
            const totalEl = document.getElementById('cartTotal');

            // --- render ---
            function renderCart(){
              cartItemsEl.innerHTML = '';
              const items = Object.values(state.items);
              if (!items.length){
                cartItemsEl.innerHTML = '<p class="dmeta">Nog geen items. Voeg links drankjes toe.</p>';
                totalEl.textContent = fmt.format(0);
                return;
              }
              let total = 0;
              for (const it of items){
                total += it.price * it.qty;
                const row = document.createElement('div');
                row.className = 'cart-row';
                row.innerHTML = `
                  <div class="line">
                    <strong>${it.title}</strong><br>
                    <span>${fmt.format(it.price)} × ${it.qty}${it.pending>0 ? ` <em style="opacity:.7">(+${it.pending} in wachtrij)</em>`:''}</span>
                  </div>
                  <div class="qty">
                    <button class="qbtn" data-action="dec" data-id="${it.id}">−</button>
                    <button class="qbtn" data-action="inc" data-id="${it.id}">＋</button>
                  </div>
                `;
                cartItemsEl.appendChild(row);
              }
              totalEl.textContent = fmt.format(total);
            }

            // --- server calls ---
            async function addOneServer(id){
              const body = new URLSearchParams();
              body.append('drinkId', id);
              body.append('qty', '1');
              body.append(CSRF_NAME, CSRF_VALUE);
              const res = await fetch(ADD_TO_TAB_URL, {
                method:'POST',
                headers:{ 'Accept':'application/json','Content-Type':'application/x-www-form-urlencoded' },
                body: body.toString()
              });
              let ok = res.ok;
              let msg = '';
              try{
                const json = await res.json();
                ok = ok && !!json.success;
                msg = json && json.merged ? 'Aantal verhoogd!' : 'Toegevoegd aan je rekening!';
              }catch(_){}
              if (!ok) throw new Error('server add failed');
              return msg || 'Toegevoegd aan je rekening!';
            }

            async function removeOneServer(id){
              if (!REMOVE_FROM_TAB_URL) return; // optional
              const body = new URLSearchParams();
              body.append('drinkId', id);
              body.append('qty', '1');
              body.append(CSRF_NAME, CSRF_VALUE);
              await fetch(REMOVE_FROM_TAB_URL, {
                method:'POST',
                headers:{ 'Accept':'application/json','Content-Type':'application/x-www-form-urlencoded' },
                body: body.toString()
              });
            }

            // --- high-level ops (local-first; server best-effort) ---
            async function addOne(id, title, price){
              // local
              const it = state.items[id] || { id, title, price:Number(price)||0, qty:0, pending:0 };
              it.qty += 1;
              it.pending += 1; // mark one to sync
              state.items[id] = it;
              saveState(); renderCart();

              // server (fulfil one pending)
              try{
                const msg = await addOneServer(id);
                // success: clear one pending
                const now = state.items[id];
                if (now){ now.pending = Math.max(0, (now.pending||0) - 1); saveState(); renderCart(); }
                toast(msg);
              }catch(e){
                // keep pending; will retry on next load
                console.warn(e);
                toast('Wachten op verbinding… item blijft in de wachtrij.');
              }
            }

            async function inc(id){
              const it = state.items[id];
              if (!it) return;
              await addOne(it.id, it.title, it.price);
            }

            async function dec(id){
              const it = state.items[id];
              if (!it) return;
              // If we still have unsent "pending" increments, consume one of those first
              if (it.pending > 0){
                it.pending -= 1;
                it.qty -= 1;
                if (it.qty <= 0) delete state.items[id];
                saveState(); renderCart();
                return;
              }
              // Otherwise we try to sync a server decrement (optional endpoint)
              it.qty -= 1;
              if (it.qty <= 0) delete state.items[id];
              saveState(); renderCart();
              try{
                await removeOneServer(id);
              }catch(_){}
            }

            // --- retry any pending adds on load (e.g., previous failures) ---
            async function flushPending(){
              const items = Object.values(state.items);
              for (const it of items){
                let tries = Math.min(20, it.pending||0); // hard cap
                while (tries-- > 0){
                  try{
                    const msg = await addOneServer(it.id);
                    it.pending = Math.max(0, it.pending - 1);
                    saveState(); renderCart();
                    // only toast the first successful retry for this item to avoid spam
                    if (tries === it.pending) toast(`${it.title}: ${msg}`);
                  }catch(e){
                    console.warn('pending retry failed for', it.id, e);
                    // stop retry loop for this item for now
                    break;
                  }
                }
              }
            }

            // --- wire UI ---
            // Add buttons
            document.querySelectorAll('.add-btn').forEach(btn=>{
              btn.addEventListener('click', ()=>{
                const row = btn.closest('.drink-row');
                const id = row.dataset.id;
                const price = parseFloat(row.dataset.price||'0');
                const title = row.dataset.title;
                addOne(id, title, price);
              });
            });

            // Qty inc/dec
            cartItemsEl.addEventListener('click', (e)=>{
              const b = e.target.closest('.qbtn'); if(!b) return;
              const id = b.dataset.id;
              const action = b.dataset.action;
              if (action === 'inc') inc(id); else dec(id);
            });

            // Search & filter
            const searchEl = document.getElementById('search');
            const filterCatEl = document.getElementById('filterCat');
            function applyFilters(){
              const term = (searchEl.value||'').trim().toLowerCase();
              const cat = (filterCatEl.value||'').trim().toLowerCase();
              document.querySelectorAll('.drink-row').forEach(row=>{
                const matchName = row.dataset.name.includes(term);
                const matchCat  = !cat || row.dataset.cat === cat;
                const visible   = row.dataset.visible === '1';
                row.style.display = (matchName && matchCat && visible) ? '' : 'none';
              });
            }
            searchEl.addEventListener('input', applyFilters);
            filterCatEl.addEventListener('change', applyFilters);

            // --- init ---
            applyFilters();
            renderCart();
            flushPending(); // push any queued adds to the server

            // Ensure all pending adds are flushed before navigating to tabs
      const payBtn = document.querySelector('.btn-pay');
      if (payBtn) {
        payBtn.addEventListener('click', async (e) => {
          e.preventDefault();
          // simple UX lock
          const original = payBtn.textContent;
          payBtn.textContent = 'Synchroniseren…';
          payBtn.style.pointerEvents = 'none';
          payBtn.setAttribute('disabled', 'disabled');

          // wait for all pending increments to finish
          try {
            await flushPending();
          } catch (_) {}

          // tiny delay to let the server persist, then go
          setTimeout(() => { window.location.href = payBtn.href; }, 150);
        });
      }
    </script>
    {% endif %} {% endif %}
  </body>
</html>
